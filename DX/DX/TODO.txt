

1.) Render arbitrary geometry
    > Setup the right pipeline (Different pipeline states)
    > Create/Upload a model to the GPU
        > Set Vertices / Indices from a model
    > Shaders
        > Hot-Reloading of shaders
    > Materials
		> Associated with a shader and uniform params cached on the cpu
	    > Push to GPU before rendering
	> Command Buffer
		> Stores Rendering Commands e.g.
			> DrawMesh(mesh, material, matrix)
	> Camera
		> View / Proj Matrix
		> As in unity, command buffer attached to different camera events?
		> Viewfrustum Culling

1.5) Debug Drawing
	> Render Lines / Boxes in wireframe

2.) Audio

3.) Physics
	> Box
	> RayCasting
	> Triangle/Ray Intersection

4.) (GUI Rendering)
	> Font
	> Images

<<<< Minecraft >>>>
	> World Generation
	> Physics 
		> Most likely just box collision, depends on how chunks are generated/stores

----------------------------------------------------------------------------------------
1. Map(MAP_WRITE_DISCARD) a big constant buffer
2. For all remaining draw calls– initially this is all of the draw calls
	a. Append per draw call constants to the mapped memory
	b. If constant buffer is full exit loop.
3. Unmap() the big constant buffer
4. For all draw calls that step 2 has generated constant data for
   a. set the right part of the big buffer as a constant buffer XXSetConstantBuffers1()
   b. Perform draw call
5. If all draw calls have not been processed restart at 1.



<<< Materials >>>
During Shader Creation:
	Which constant buffer is the material buffer?
		-> Scan for "material" in name
			-> SAVE: Data-Types + Names 
			-> SAVE: Bind-Slot

When a shader is assigned to a material:
	Create a constant buffer large enough for the data

Bind this constant buffer to shader when material gets binded



Shader-Info:
- Buffer-Size
- For-each member (name) an offset into the buffer
  > Member-Type (e.g. can be texture)
- Binding Slot
- ShaderType

Problem: 
- Buffer for different shaders? Yea